---Zi-BudgetApp

--frontend
стек:
    bootstrap,
    chart.js,
    react^19.0.0,
    react-dom,
    react-router^7.5.0
    React Hook Form
    react-bootstrap
    Zustand

/ – Промо-страница (лендинг)
    Функционал:
        шапка: слева иконка приложение, кнопка войти справа
        Краткое описание возможностей приложения.
        Кнопки CTA: «Попробовать бесплатно» (ведет на /register).
        Отзывы пользователей.
        FAQ (минимум 3 вопроса).

/login – Авторизация
    Функционал:
        Форма ввода email/пароля.
        Ссылки: «Забыли пароль?»(ведет на /reset-password) и «Регистрация».

/register – Регистрация
    Функционал:
        Форма: email, пароль, подтверждение пароля.
        Валидация:
            Email соответствует regex.
            Пароль не менее 8 символов.
            Галочка «Принимаю условия использования» (обязательная).

/reset-password – Сброс пароля и установка нового
    Функционал:
    Поля: email, новый пароль, подтверждение.

/dashboard – Главная (Dashboard)
    Краткая сводка: баланс, доходы/расходы за месяц.
    График распределения расходов по категориям (круговая диаграмма).
    Последние транзакции (5-10 штук).

/transactions – Все транзакции
    Таблица или список с фильтрами:
        По дате (неделя/месяц/год).
        По категориям.
        По типу (доход/расход).
        Поиск по описанию.
        Кнопка "Добавить транзакцию" (открывает модалку/форму).

/budget – Планирование бюджета
    Установка лимитов для категорий (например, "Еда – 10 000 руб/мес").
    Прогресс-бары по категориям (сколько осталось до лимита).
    Уведомления о превышении (можно реализовать через toast).

/statistics – Детальная статистика
    Графики:
        Динамика доходов/расходов за период (линейный график).
        Сравнение месяцев (столбчатая диаграмма).
        Экспорт данных в CSV/PDF.

/categories – Управление категориями
    Добавление/удаление/редактирование категорий.
    Назначение цветов для визуализации.

/history – История изменений
    Фильтры:
        По дате (за день/неделю/месяц).
        По типу действия.
    Лог всех действий пользователя (аудит):
        Добавление/удаление транзакций.
        Изменение лимитов бюджета.
        Редактирование категорий.

/settings – Настройки
    Валюта, язык, тема (светлая/темная).
    Резервное копирование данных (экспорт/импорт).

/support – Техническая поддержка
    Функционал:
        Форма обращения в поддержку:
            Выбор типа проблемы (баг, вопрос, предложение).
            Поле для описания + прикрепление скриншотов.
            История обращений (статус: «в обработке», «решено»).
        FAQ (частые вопросы).
        Контакты (email, Telegram-бот).

/help – Справка
    Функционал:
    Документация по использованию приложения:
    Как добавить транзакцию.
    Как настроить бюджет.



--store

auth.store.js
    user: null,
    token: null,
    isAuth: false,
    isLoading: false,
    error: null,
    isSuccesReset:false,
    login()
    register()
    logout()
    resetPassword()
    checkAuth()
    {
      name: 'auth-storage', // Ключ для localStorage
      partialize: (state) => ({ token: state.token }), // Сохраняем только токен
    }
    // Инициализация проверки аутентификации при загрузке
    useAuthStore.getState().checkAuth();

budget.store.js
    monthlyBudget: null,      // Общий месячный бюджет
    categoryLimits: {},       // { categoryId: limit }
    spendingByCategory: {},   // { categoryId: spentAmount }
    isLoading: false,
    error: null,
    exceededLimits: [],       // Категории, где превышен лимит
    fetchBudgetData()
    setMonthlyBudget()
    setCategoryLimit()
    getAvailableBudget()
    getCategoryProgress()
    // Подписки на изменения
    useAuthStore.subscribe(
    state => state.isAuth,
    isAuth => {
        if (isAuth) {
        useBudgetStore.getState().fetchBudgetData();
        } else {
        useBudgetStore.setState({
            monthlyBudget: null,
            categoryLimits: {},
            spendingByCategory: {}
        });
        }
    }
    );
    useTransactionsStore.subscribe(
    state => state.transactions,
    () => {
        if (useAuthStore.getState().isAuth) {
        const { categoryLimits } = useBudgetStore.getState();
        const transactions = useTransactionsStore.getState().transactions;
        
        const spendingByCategory = calculateSpending(transactions, categoryLimits);
        const exceededLimits = checkExceededLimits(spendingByCategory, categoryLimits);
        
        useBudgetStore.setState({ spendingByCategory, exceededLimits });
        }
    }
    );

categories.store.js
    categories: [],
    incomeCategories: [],
    expenseCategories: [],
    isLoading: false,
    error: null,
    fetchCategories()
    addCategory()
    updateCategory()
    deleteCategory()
    getCategoryById()
    getCategoriesByType()
    // Автоматическая загрузка категорий при авторизации
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useCategoriesStore.getState().fetchCategories();
            } else {
                useCategoriesStore.setState({
                    categories: [],
                    incomeCategories: [],
                    expenseCategories: []
                });
            }
        }
    );

goals.store.js
    goals: [],
    activeGoals: [],
    completedGoals: [],
    isLoading: false,
    error: null,
    fetchGoals()
    addGoal()
    updateGoal()
    deleteGoal()
    addToGoal()
    getGoalById()
    getGoalProgress()
    // Автоматическая загрузка целей при авторизации
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useGoalsStore.getState().fetchGoals();
            } else {
                useGoalsStore.setState({
                    goals: [],
                    activeGoals: [],
                    completedGoals: []
                });
            }
        }
    );

history.store.js
    history: [],
    filteredHistory: [],
    isLoading: false,
    error: null,
    
    // Фильтры
    filters: {
        actionType: null,     // Тип действия (ADD/UPDATE/DELETE)
        entityType: null,     // Сущность (TRANSACTION/CATEGORY/etc)
        dateRange: 'month',   // Период (week/month/year/all)
        startDate: null,      // Начальная дата для кастомного диапазона
        endDate: null         // Конечная дата
    },
    fetchHistory()
    addAction()
    undoAction()
    setFilter()
    applyFilters()
    getEntityHistory()
    // Автоматическая загрузка истории при авторизации
    useAuthStore.subscribe(
    (state) => state.isAuth,
    (isAuth) => {
        if (isAuth) {
        useHistoryStore.getState().fetchHistory();
        } else {
        useHistoryStore.setState({ 
            history: [],
            filteredHistory: []
        });
        }
    }
    );

transactions.store.js
    // Состояние
    transactions: [],
    filteredTransactions: [],
    isLoading: false,
    error: null,

    // Фильтры и пагинация
    filters: {
        dateRange: 'month', // week/month/year/custom
        startDate: null,
        endDate: null,
        category: null,
        type: null, // income/expense
        searchQuery: '',
    },
    pagination: {
        currentPage: 1,
        itemsPerPage: 10,
        totalItems: 0,
    },
    fetchTransactions()
    addTransaction()
    updateTransaction()
    deleteTransaction()
    setFilter()
    applyFilters()
    setPage()
    // Инициализация при загрузке
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useTransactionsStore.getState().fetchTransactions();
            } else {
                useTransactionsStore.setState({ transactions: [], filteredTransactions: [] });
            }
        }
    );

ui.store.js
    theme: 'light', // 'light' | 'dark'
    language: 'ru', // 'ru' | 'en'
    currency: 'RUB', // 'RUB' | 'USD' | 'EUR'
    sidebarOpen: true,
    modals: {
    transaction: false,
    category: false,
    budget: false,
    goal: false
    },
    currentModal: null,
    toastNotifications: [],
    isLoading: false,
    toggleTheme()
    setLanguage()
    setCurrency()
    toggleSidebar()
    openSidebar()
    closeSidebar()
    openModal()
    closeModal()
    closeAllModals()
    addToast()
    removeToast()
    clearToasts()
    startLoading()
    stopLoading()
    {
      name: 'ui-settings', // Ключ для localStorage
      partialize: (state) => ({
        theme: state.theme,
        language: state.language,
        currency: state.currency,
        sidebarOpen: state.sidebarOpen
      }), // Сохраняем только настройки
    }
    // Инициализация темы при загрузке
    const initializeTheme = () => {
    const { theme } = useUIStore.getState();
    document.documentElement.setAttribute('data-theme', theme);
    };

    // Вызываем инициализацию при загрузке хранилища
    initializeTheme();

    // Подписка на изменение темы
    useUIStore.subscribe(
    (state) => state.theme,
    (theme) => {
        document.documentElement.setAttribute('data-theme', theme);
    }
    );



Апи

/api/auth/login
/api/auth/register
/api/auth/reset-password
/api/auth/me (проверка токена)

// GET /api/budget - получить общий бюджет
// PUT /api/budget - обновить общий бюджет
// GET /api/budget/limits - получить лимиты по категориям
// POST /api/budget/limits - установить/обновить лимит для категории

// GET /api/categories - получить все категории пользователя
// POST /api/categories - создать новую категорию
// PUT /api/categories/:id - обновить категорию
// DELETE /api/categories/:id - удалить категорию

// GET /api/goals - получить все цели пользователя
// POST /api/goals - создать новую цель
// PUT /api/goals/:id - обновить цель
// DELETE /api/goals/:id - удалить цель
// POST /api/goals/:id/add - добавить сумму к цели

// GET /api/history - получить историю с фильтрами
// POST /api/history - добавить запись в историю
// POST /api/history/:id/undo - отменить действие
