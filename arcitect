---Zi-BudgetApp

--frontend
стек:
    bootstrap,
    chart.js,
    react^19.0.0,
    react-dom,
    react-router^7.5.0
    React Hook Form
    react-bootstrap
    Zustand

/ – Промо-страница (лендинг)
    Функционал:
        шапка: слева иконка приложение, кнопка войти справа
        Краткое описание возможностей приложения.
        Кнопки CTA: «Попробовать бесплатно» (ведет на /register).
        Отзывы пользователей.
        FAQ (минимум 3 вопроса).

/login – Авторизация
    Функционал:
        Форма ввода email/пароля.
        Ссылки: «Забыли пароль?»(ведет на /reset-password) и «Регистрация».

/register – Регистрация
    Функционал:
        Форма: email, пароль, подтверждение пароля.
        Валидация:
            Email соответствует regex.
            Пароль не менее 8 символов.
            Галочка «Принимаю условия использования» (обязательная).

/reset-password – Сброс пароля и установка нового
    Функционал:
    Поля: email, новый пароль, подтверждение.

/dashboard – Главная (Dashboard)
    Краткая сводка: баланс, доходы/расходы за месяц.
    График распределения расходов по категориям (круговая диаграмма).
    Последние транзакции (5-10 штук).

/transactions – Все транзакции
    Таблица или список с фильтрами:
        По дате (неделя/месяц/год).
        По категориям.
        По типу (доход/расход).
        Поиск по описанию.
        Кнопка "Добавить транзакцию" (открывает модалку/форму).

/budget – Планирование бюджета
    Установка лимитов для категорий (например, "Еда – 10 000 руб/мес").
    Прогресс-бары по категориям (сколько осталось до лимита).
    Уведомления о превышении (можно реализовать через toast).

/statistics – Детальная статистика
    Графики:
        Динамика доходов/расходов за период (линейный график).
        Сравнение месяцев (столбчатая диаграмма).
        Экспорт данных в CSV/PDF.

/categories – Управление категориями
    Добавление/удаление/редактирование категорий.
    Назначение цветов для визуализации.

/history – История изменений
    Фильтры:
        По дате (за день/неделю/месяц).
        По типу действия.
    Лог всех действий пользователя (аудит):
        Добавление/удаление транзакций.
        Изменение лимитов бюджета.
        Редактирование категорий.

/settings – Настройки
    Валюта, язык, тема (светлая/темная).
    Резервное копирование данных (экспорт/импорт).

/support – Техническая поддержка
    Функционал:
        Форма обращения в поддержку:
            Выбор типа проблемы (баг, вопрос, предложение).
            Поле для описания + прикрепление скриншотов.
            История обращений (статус: «в обработке», «решено»).
        FAQ (частые вопросы).
        Контакты (email, Telegram-бот).

/help – Справка
    Функционал:
    Документация по использованию приложения:
    Как добавить транзакцию.
    Как настроить бюджет.



--store

auth.store.js
    user: null,
    token: null,
    isAuth: false,
    isLoading: false,
    error: null,
    isSuccesReset:false,
    login()
    register()
    logout()
    resetPassword()
    checkAuth()
    {
      name: 'auth-storage', // Ключ для localStorage
      partialize: (state) => ({ token: state.token }), // Сохраняем только токен
    }
    // Инициализация проверки аутентификации при загрузке
    useAuthStore.getState().checkAuth();

budget.store.js
    monthlyBudget: null,      // Общий месячный бюджет
    categoryLimits: {},       // { categoryId: limit }
    spendingByCategory: {},   // { categoryId: spentAmount }
    isLoading: false,
    error: null,
    exceededLimits: [],       // Категории, где превышен лимит
    fetchBudgetData()
    setMonthlyBudget()
    setCategoryLimit()
    getAvailableBudget()
    getCategoryProgress()
    // Подписки на изменения
    useAuthStore.subscribe(
    state => state.isAuth,
    isAuth => {
        if (isAuth) {
        useBudgetStore.getState().fetchBudgetData();
        } else {
        useBudgetStore.setState({
            monthlyBudget: null,
            categoryLimits: {},
            spendingByCategory: {}
        });
        }
    }
    );
    useTransactionsStore.subscribe(
    state => state.transactions,
    () => {
        if (useAuthStore.getState().isAuth) {
        const { categoryLimits } = useBudgetStore.getState();
        const transactions = useTransactionsStore.getState().transactions;
        
        const spendingByCategory = calculateSpending(transactions, categoryLimits);
        const exceededLimits = checkExceededLimits(spendingByCategory, categoryLimits);
        
        useBudgetStore.setState({ spendingByCategory, exceededLimits });
        }
    }
    );

categories.store.js
    categories: [],
    incomeCategories: [],
    expenseCategories: [],
    isLoading: false,
    error: null,
    fetchCategories()
    addCategory()
    updateCategory()
    deleteCategory()
    getCategoryById()
    getCategoriesByType()
    // Автоматическая загрузка категорий при авторизации
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useCategoriesStore.getState().fetchCategories();
            } else {
                useCategoriesStore.setState({
                    categories: [],
                    incomeCategories: [],
                    expenseCategories: []
                });
            }
        }
    );

goals.store.js
    goals: [],
    activeGoals: [],
    completedGoals: [],
    isLoading: false,
    error: null,
    fetchGoals()
    addGoal()
    updateGoal()
    deleteGoal()
    addToGoal()
    getGoalById()
    getGoalProgress()
    // Автоматическая загрузка целей при авторизации
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useGoalsStore.getState().fetchGoals();
            } else {
                useGoalsStore.setState({
                    goals: [],
                    activeGoals: [],
                    completedGoals: []
                });
            }
        }
    );

history.store.js
    history: [],
    filteredHistory: [],
    isLoading: false,
    error: null,
    
    // Фильтры
    filters: {
        actionType: null,     // Тип действия (ADD/UPDATE/DELETE)
        entityType: null,     // Сущность (TRANSACTION/CATEGORY/etc)
        dateRange: 'month',   // Период (week/month/year/all)
        startDate: null,      // Начальная дата для кастомного диапазона
        endDate: null         // Конечная дата
    },
    fetchHistory()
    addAction()
    undoAction()
    setFilter()
    applyFilters()
    // Автоматическая загрузка истории при авторизации
    useAuthStore.subscribe(
    (state) => state.isAuth,
    (isAuth) => {
        if (isAuth) {
        useHistoryStore.getState().fetchHistory();
        } else {
        useHistoryStore.setState({ 
            history: [],
            filteredHistory: []
        });
        }
    }
    );

transactions.store.js
    // Состояние
    transactions: [],
    filteredTransactions: [],
    isLoading: false,
    error: null,

    // Фильтры и пагинация
    filters: {
        dateRange: 'month', // week/month/year/custom
        startDate: null,
        endDate: null,
        category: null,
        type: null, // income/expense
        searchQuery: '',
    },
    pagination: {
        currentPage: 1,
        itemsPerPage: 10,
        totalItems: 0,
    },
    fetchTransactions()
    addTransaction()
    updateTransaction()
    deleteTransaction()
    setFilter()
    applyFilters()
    setPage()
    // Инициализация при загрузке
    useAuthStore.subscribe(
        (state) => state.isAuth,
        (isAuth) => {
            if (isAuth) {
                useTransactionsStore.getState().fetchTransactions();
            } else {
                useTransactionsStore.setState({ transactions: [], filteredTransactions: [] });
            }
        }
    );



ui.store.js
    theme: 'light', // 'light' | 'dark'
    language: 'ru', // 'ru' | 'en'
    currency: 'RUB', // 'RUB' | 'USD' | 'EUR'
    sidebarOpen: true,
    modals: {
    transaction: false,
    category: false,
    budget: false,
    goal: false
    },
    currentModal: null,
    toastNotifications: [],
    isLoading: false,
    toggleTheme()
    setLanguage()
    setCurrency()
    openModal()
    closeModal()
    closeAllModals()
    addToast()
    removeToast()
    clearToasts()
    {
      name: 'ui-settings', // Ключ для localStorage
      partialize: (state) => ({
        theme: state.theme,
        language: state.language,
        currency: state.currency,
        sidebarOpen: state.sidebarOpen
      }), // Сохраняем только настройки
    }
    // Инициализация темы при загрузке
    const initializeTheme = () => {
    const { theme } = useUIStore.getState();
    document.documentElement.setAttribute('data-theme', theme);
    };

    // Вызываем инициализацию при загрузке хранилища
    initializeTheme();

    // Подписка на изменение темы
    useUIStore.subscribe(
    (state) => state.theme,
    (theme) => {
        document.documentElement.setAttribute('data-theme', theme);
    }
    );



API

budgets
    id (PK)
    user_id (FK → users.id)
    amount (DECIMAL)
    created_at (TIMESTAMP)
    updated_at (TIMESTAMP)

    GET /api/budget
    Ответ:
    {
        "amount": 50000.00,
        "updated_at": "2023-11-20T12:00:00Z"
    }

    POST /api/budget
    {
        "amount": 55000.00
    }
    ответ:
    {
        "amount": 55000.00,
        "updated_at": "2023-11-20T12:05:00Z"
    }

category_limits
    id (PK)
    user_id (FK → users.id)
    category_id (FK → categories.id)
    limit_amount (DECIMAL)
    created_at (TIMESTAMP)
    updated_at (TIMESTAMP)

    GET /api/budget/limits
    ответ:
    {
        "1": 15000.00,
        "2": 10000.00
    }

    POST /api/budget/limits
    {
        "categoryId": 3,
        "limit": 12000.00
    }
    ответ:
    {
        "categoryId": 3,
        "limit": 12000.00,
        "updated_at": "2023-11-20T12:10:00Z"
    }

categories
    id (PK)
    user_id (FK → users.id)
    name (VARCHAR)
    color (VARCHAR)
    is_type_income (BOOLEAN)
    created_at (TIMESTAMP)
    updated_at (TIMESTAMP)

    GET /api/categories
    Ответ:
    [
        {
            "id": 1,
            "name": "Продукты",
            "color": "#FF6900",
            "is_type_income": false,
            "created_at": "2023-11-20T12:00:00Z"
        }
    ]

    POST /api/categories/add
    {
        "name": "Транспорт",
        "color": "#0693E3",
        "is_type_income": false
    }
    Ответ:
    {
        "id": 2,
        "name": "Транспорт",
        "color": "#0693E3",
        "is_type_income": false,
        "created_at": "2023-11-20T12:10:00Z"
    }

    POST /api/categories/update
    {
        "id": 2,
        "name": "Общественный транспорт",
        "color": "#0693E3"
    }
    Ответ:
    {
        "id": 2,
        "name": "Общественный транспорт",
        "color": "#0693E3",
        "is_type_income": false,
        "updated_at": "2023-11-20T12:15:00Z"
    }

    POST /api/categories/delete
    {
        "id": 2
    }
    Ответ:
    {
        "success": true,
        "message": "Category deleted"
    }

goals
    id (PK)
    user_id (FK → users.id)
    title (VARCHAR)
    description (TEXT)
    target_amount (DECIMAL)
    current_amount (DECIMAL)
    deadline (DATE)
    completed (BOOLEAN)
    created_at (TIMESTAMP)
    updated_at (TIMESTAMP)

    GET /api/goals
    Ответ:
    [
        {
            "id": 1,
            "title": "Новый ноутбук",
            "description": "MacBook Pro 16",
            "target_amount": 250000,
            "current_amount": 50000,
            "deadline": "2024-12-31",
            "completed": false,
            "created_at": "2023-11-20T12:00:00Z"
        }
    ]

    POST /api/goals/add
    {
        "title": "Путешествие",
        "description": "Поездка в Японию",
        "target_amount": 500000,
        "deadline": "2024-06-01"
    }
    Ответ:
    {
        "id": 2,
        "title": "Путешествие",
        "description": "Поездка в Японию",
        "target_amount": 500000,
        "current_amount": 0,
        "deadline": "2024-06-01",
        "completed": false,
        "created_at": "2023-11-20T12:10:00Z"
    }

    POST /api/goals/update
    {
        "id": 2,
        "title": "Путешествие в Японию",
        "target_amount": 600000
    }
    Ответ:
    {
        "id": 2,
        "title": "Путешествие в Японию",
        "target_amount": 600000,
        "updated_at": "2023-11-20T12:15:00Z"
    }

    POST /api/goals/delete
    {
        "id": 2
    }
    Ответ:
    {
        "success": true,
        "message": "Goal deleted"
    }

    POST /api/goals/add-money
    {
        "id": 1,
        "amount": 25000
    }
    Ответ:
    {
        "id": 1,
        "current_amount": 75000,
        "updated_at": "2023-11-20T12:20:00Z"
    }

history_actions
    id (PK)
    user_id (FK → users.id)
    action_type (ENUM: 'ADD', 'UPDATE', 'DELETE', 'UPDATE_BUDGET', 'SET_CATEGORY_LIMIT')
    entity_type (ENUM: 'Transaction', 'Category', 'Budget', 'Goal')
    entity_id (INTEGER)
    old_data (JSONB)
    new_data (JSONB)
    timestamp (TIMESTAMP)

    GET /api/history
    Параметры:
        actionType (опционально) - тип действия
        entityType (опционально) - тип сущности
        dateRange (обязательно) - период (day/week/month/year/all/custom)
        startDate (опционально для custom) - начальная дата (ISO)
        endDate (опционально для custom) - конечная дата (ISO)
    Ответ:
    [
        {
            "id": 1,
            "action_type": "ADD",
            "entity_type": "Transaction",
            "entity_id": 101,
            "old_data": null,
            "new_data": {
                "amount": 5000,
                "description": "Продукты"
            },
            "timestamp": "2023-06-15T10:30:00Z"
        }
    ]

    POST /api/history/add
    {
        "action_type": "UPDATE",
        "entity_type": "Category",
        "entity_id": 3,
        "old_data": {
            "name": "Еда",
            "limit": 10000
        },
        "new_data": {
            "name": "Продукты",
            "limit": 15000
        }
    }
    Ответ:
    {
        "id": 2,
        "action_type": "UPDATE",
        "entity_type": "Category",
        "entity_id": 3,
        "timestamp": "2023-06-14T15:45:00Z"
    }

    POST /api/history/undo
    {
        "id": 2
    }
    Ответ:
    {
        "success": true,
        "message": "Action undone",
        "restored_entity": {
            "id": 3,
            "name": "Еда",
            "limit": 10000
        }
    }


transactions
    id (PK)
    user_id (FK → users.id)
    amount (DECIMAL)
    description (TEXT)
    date (DATE)
    type (ENUM: 'income', 'expense')
    category_id (FK → categories.id)
    created_at (TIMESTAMP)
    updated_at (TIMESTAMP)

    GET /api/transactions
    Параметры:
        dateRange - период (week/month/year/all/custom)
        startDate (опционально) - начальная дата (ISO)
        endDate (опционально) - конечная дата (ISO)
        category (опционально) - ID категории
        type (опционально) - тип (income/expense)
        search (опционально) - поиск по описанию
        page (опционально) - номер страницы
        limit (опционально) - элементов на странице
    Ответ:
    {
        "transactions": [
            {
            "id": 1,
            "amount": 5000,
            "description": "Продукты",
            "date": "2023-06-15",
            "type": "expense",
            "category_id": 3,
            "created_at": "2023-06-15T10:30:00Z"
            }
        ],
        "total": 1
    }

    POST /api/transactions/add
    {
        "amount": 25000,
        "description": "Зарплата",
        "date": "2023-06-20",
        "type": "income",
        "category_id": 5
    }
    Ответ:
    {
        "id": 2,
        "amount": 25000,
        "description": "Зарплата",
        "date": "2023-06-20",
        "type": "income",
        "category_id": 5,
        "created_at": "2023-06-20T09:15:00Z"
    }

    POST /api/transactions/update
    {
        "id": 1,
        "amount": 5500,
        "description": "Продукты (супермаркет)"
    }
    Ответ:
    {
        "id": 1,
        "amount": 5500,
        "description": "Продукты (супермаркет)",
        "updated_at": "2023-06-15T11:45:00Z"
    }

    POST /api/transactions/delete
    {
        "id": 1
    }
    Ответ:
    {
        "success": true,
        "message": "Transaction deleted"
    }